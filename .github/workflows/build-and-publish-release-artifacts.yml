name: Build and Publish Release Artifacts

on: [push]

jobs:

  build-and-publish:
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Test
      run: go test -v ./...

    - run: env GOOS=linux GOARCH=amd64 go build -o oob-linux-amd64 .
    - run: env GOOS=windows GOARCH=amd64 go build -o oob-windows-amd64 .

    - name: Get Version Number
      id: get_version_number
      run: echo "::set-output name=version::$(./oob-linux-amd64 -v)"
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version_number.outputs.version }}
        release_name: v${{ steps.get_version_number.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: oob-linux-amd64
        asset_path: ./oob-linux-amd64
        asset_content_type: application/binary-x

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: oob-windows-amd64
        asset_path: ./oob-windows-amd64
        asset_content_type: application/binary-x
